{"version":3,"sources":["Table.js","App.js","reportWebVitals.js","index.js"],"names":["AddButton","styled","button","_templateObject","_taggedTemplateLiteral","Button","_templateObject2","Input","input","_templateObject3","Table","props","_useState","useState","initState","_useState2","_slicedToArray","rows","setRows","handleInputChange","id","fieldName","value","updatedRows","map","row","_objectSpread","_defineProperty","React","createElement","example","key","type","name","onChange","e","target","object","onClick","length","filter","handleRemoveRow","newRow","Date","now","concat","_toConsumableArray","_step","shuffledNames","array","i","j","Math","floor","random","_ref","shuffleArray","obj","_iterator","_createForOfIteratorHelper","entries","s","n","done","_ref2","_ref3","index","element","err","f","bedroomState","foodState","App","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.cda3a5d3.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport styled from \"styled-components\";\n\nfunction shuffleArray(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n}\n\nconst AddButton = styled.button`\n  margin: 0px 0px;\n  padding: 0px 0px;\n  width: 313px;\n`;\n\nconst Button = styled.button`\ncolor: black;\n`;\n\nconst Input = styled.input`\n  width: 140px;\n  border: 1px solid;\n  border-radius: 3px;\n`;\n\nfunction Table(props) {\n  const [rows, setRows] = useState(\n    props.initState\n  );\n\n  const handleAddRow = () => {\n    const newRow = {\n      id: Date.now(),\n      name: \"\",\n      object: \"\",\n    };\n    setRows([...rows, newRow]);\n  };\n\n  const handleRemoveRow = (id) => {\n    if (rows.length > 1) {\n    const updatedRows = rows.filter((row) => row.id !== id);\n    setRows(updatedRows);\n    };\n  };\n  \n  const handleShuffle = () => {\n    const shuffledNames = shuffleArray(rows.map(obj => obj.object));\n    \n    for (const [index, element] of rows.entries()) {\n      rows[index].object = shuffledNames[index];\n      handleInputChange(element.id, \"object\", shuffledNames[index]);\n    }\n\n\n  };\n\n  const handleInputChange = (id, fieldName, value) => {\n    const updatedRows = rows.map((row) => {\n      if (row.id === id) {\n        return { ...row, [fieldName]: value };\n      }\n      return row;\n    });\n    setRows(updatedRows);\n  };\n\n  return (\n    <div>\n      <table>\n        {props.example ? null : \n        <thead>\n          <tr>\n          <th>Subject</th>\n            <th>Object (Shuffled)</th>\n          </tr>\n        </thead>\n}\n        <tbody>\n          {rows.map((row) => (\n            <tr key={row.id}>\n              <td>\n                <Input\n                  type=\"text\"\n                  value={row.name}\n                  onChange={(e) =>\n                    handleInputChange(row.id, \"name\", e.target.value)\n                  }\n                />\n              </td>\n              <td>\n                <Input\n                  type=\"text\"\n                  value={row.object}\n                  onChange={(e) =>\n                    handleInputChange(row.id, \"object\", e.target.value)\n                  }\n                />\n              </td>\n              <td>\n                <button onClick={() => handleRemoveRow(row.id)}>X</button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n        {props.example ? null : \n          <AddButton onClick={handleAddRow}>+</AddButton>\n        }\n      \n      {props.example ? null : <h2></h2>}\n      <Button onClick={handleShuffle}>{props.example ? props.example : \"Shuffle Options\"}</Button>\n    </div>\n  );\n}\n\nexport default Table;\n","import React from \"react\";\nimport Table from \"./Table\";\n\nconst initState = [\n    {\n        id: Date.now(),\n        name: \"\",\n        object: \"\",\n    },\n    {\n        id: Date.now() - 10,\n        name: \"\",\n        object: \"\",\n    }\n];\n\nconst bedroomState = [\n    {\n        id: Date.now(),\n        name: \"Gus\",\n        object: \"Bedroom 1\",\n    },\n    {\n        id: Date.now() - 10,\n        name: \"Walid\",\n        object: \"Bedroom 2\",\n    },\n    {\n        id: Date.now() - 20,\n        name: \"John\",\n        object: \"Bedroom 3 Shared\",\n    },\n    {\n        id: Date.now() - 30,\n        name: \"Alex\",\n        object: \"Bedroom 3 Shared\",\n    },\n    {\n        id: Date.now() - 40,\n        name: \"Lukasz\",\n        object: \"Couch\",\n    }\n];\n\nconst foodState = [\n    {\n        id: Date.now(),\n        name: \"Salt City Market\",\n        object: \"\",\n    },\n    {\n        id: Date.now() - 10,\n        name: \"Dinosaur BBQ\",\n        object: \"\",\n    },\n    {\n        id: Date.now() - 20,\n        name: \"Apizza Regionale\",\n        object: \"‚Üê This Restaurant\",\n    },\n    {\n        id: Date.now() - 30,\n        name: \"The Evergreen\",\n        object: \"\",\n    },\n    {\n        id: Date.now() - 40,\n        name: \"Shaughnessy's\",\n        object: \"\",\n    },\n    {\n        id: Date.now() - 50,\n        name: \"Chinese Takeout\",\n        object: \"\",\n    }\n];\n\nfunction App() {\n    return (\n        <div>\n            <p>Build your choice matrix by filling in the table below. All information will be lost on page refresh.</p>\n            <Table initState={initState} />\n            <h1></h1>\n            <article>\n                <p>You can find some example use cases below.</p>\n            </article>\n            <h3>Never able to decide to where to eat?</h3>\n            <Table initState={foodState} example=\"Pick Ristorante\" />\n            <h3>Choosing an Airbnb bedroom is now fair and effortless!</h3>\n            <Table initState={bedroomState} example=\"Assign Bedrooms\" />\n        </div>\n    );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}